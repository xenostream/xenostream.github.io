<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XenoStream&#39;s Private Site</title>
    <link>http://xenostream.github.io/</link>
    <description>Recent content on XenoStream&#39;s Private Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy;Xenostream.com. &amp;reg;2017 All Rights Reserved.</copyright>
    <lastBuildDate>Tue, 12 Sep 2017 07:18:23 +0000</lastBuildDate>
    <atom:link href="http://xenostream.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>acme sac</title>
      <link>http://xenostream.github.io/2017/09/acme-sac</link>
      <pubDate>Tue, 12 Sep 2017 07:18:23 +0000</pubDate>
      
      <guid>http://xenostream.github.io/2017/09/acme-sac</guid>
      <description>

&lt;h1 id=&#34;acme-editor-for-windows-acmesac-x64:ba6906388beb3e762e3ec6faba7ef161&#34;&gt;Acme Editor for Windows(acmesac_x64)&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://xenostream.github.io/images/acme.zip&#34;&gt; Acme-Sac x64 &lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup Blog with Hugo with Github Pages</title>
      <link>http://xenostream.github.io/2017/01/setup-blog-with-hugo-with-github-pages</link>
      <pubDate>Wed, 04 Jan 2017 23:23:41 +0930</pubDate>
      
      <guid>http://xenostream.github.io/2017/01/setup-blog-with-hugo-with-github-pages</guid>
      <description>

&lt;p&gt;Github에서 제공하는 Pages기능을 이용해서, 블로그를 무료(??)로 이용하는 방법에 대해서 설명합니다.&lt;/p&gt;

&lt;h1 id=&#34;최초-설치:7a8e697e5b301bc82024e089c23ea074&#34;&gt;최초 설치&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;github.com&lt;/code&gt; 에서 컨텐츠를 생성할 계정을 생성합니다.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;public Repository&lt;/code&gt;를 생성합니다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;반드시 &lt;code&gt;계정명.github.io&lt;/code&gt;의 Repository 이름으로 생성해야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;HUGO Server를 설치한 후, config.toml파일을 설정합니다.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;   baseurl = &amp;quot;http://xenostream.github.io/&amp;quot;
   languageCode = &amp;quot;en-us&amp;quot;
   title = &amp;quot;XenoStream&#39;s Private Site&amp;quot;
   
   theme = &amp;quot;vienna&amp;quot;
   copyright = &amp;quot;&amp;amp;copy;Xenostream.com. &amp;amp;reg;2016 All Rights Reserved.&amp;quot;
   
   contentdir = &amp;quot;content&amp;quot;
   layoutdir = &amp;quot;layouts&amp;quot;
   publishdir = &amp;quot;public&amp;quot;
   builddrafts = &amp;quot;false&amp;quot;
   canonifyurls = &amp;quot;true&amp;quot;   
   datadir = &amp;quot;data&amp;quot;
   
   hasCJKLanguage = &amp;quot;true&amp;quot;
   paginate = &amp;quot;5&amp;quot;
   
   
   
   [permalinks]
     post = &amp;quot;/:year/:month/:title&amp;quot;
   
   [taxonomies]
     category = &amp;quot;categories&amp;quot;
     tag = &amp;quot;tags&amp;quot;
   
   
   [params]
   # github = &amp;quot;xenostream&amp;quot;
   # googleplus = &amp;quot;xenostream&amp;quot;
    disqus = &amp;quot;xenostream&amp;quot;
    subtitle = &amp;quot;Software &amp;amp; System Engineer!!&amp;quot;
   
    tags = &amp;quot;/tags&amp;quot;
    about = &amp;quot;/2016/02/about&amp;quot;
    archive = &amp;quot;/post&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;post-생성:7a8e697e5b301bc82024e089c23ea074&#34;&gt;Post 생성&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;/root/Hugo/xenostream&lt;/code&gt; 디렉토리의 &lt;code&gt;contents/post&lt;/code&gt; 디렉토리에서 새로운 포스트를 생성합니다.&lt;/p&gt;

&lt;p&gt;또는 &lt;code&gt;hugo new /post/test.md&lt;/code&gt; 명령으로 자동생성해도 됩니다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;hugo&lt;/code&gt; 명령어를 실행해서 새로운 포스트의 정적 파일을 자동생성 합니다. (public 디렉토리 생성됨)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;새롭게 생성된 &lt;code&gt;public&lt;/code&gt;디렉토리에서 다음의 명령으로 동기화 합니다.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;   cd public 
   git init
   git remote add origin https://github.com/xenostream/xenostream.github.io.git
   git add .
   git commit -m &amp;quot;Init: 2017/01/04&amp;quot;

   git push -u origin master      
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10분정도의 Delay후에 해당 페이지가 갱신됩니다.(곧바로 되는 경우도 있습니다)&lt;/p&gt;

&lt;h1 id=&#34;포스트-추가:7a8e697e5b301bc82024e089c23ea074&#34;&gt;포스트 추가&lt;/h1&gt;

&lt;p&gt;추가적인 포스트를 작성한 후에 추가분만 동기화 할 경우에는 다음과 같이 진행합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /root/Hugo/xenostream
vi contents/post/test.md
hugo
cd public
git add .
git commit -m &amp;quot;변경사유&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;자동배포-스크립트:7a8e697e5b301bc82024e089c23ea074&#34;&gt;자동배포 스크립트&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;/root/Hugo/xenostream&lt;/code&gt; 디렉토리에서 사용&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project.
hugo # if using a theme, replace by `hugo -t &amp;lt;yourtheme&amp;gt;`

# Go To Public folder
cd public
# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master

# Come Back
cd ..
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Snorkel Embedded Webserver with C Language</title>
      <link>http://xenostream.github.io/2017/01/snorkel-embedded-webserver-with-c-language</link>
      <pubDate>Wed, 04 Jan 2017 16:05:37 +0930</pubDate>
      
      <guid>http://xenostream.github.io/2017/01/snorkel-embedded-webserver-with-c-language</guid>
      <description>

&lt;h1 id=&#34;snorkel-embedded-web-compile-on-x64-linux:54b3ffa9aab45f436545aea0e041b607&#34;&gt;Snorkel Embedded Web Compile on x64 Linux&lt;/h1&gt;

&lt;p&gt;Snorkel Library는 32bit 이므로, 필수 라이브러리 설치&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install glibc.i686 glibc-devel.i686 libzip.i686 libzip-devel.i686
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gcc -m32 -lsnorkel32 -lrt -lm -lnsl -lpthread src.c&lt;/code&gt; 로 컴파일!!&lt;/p&gt;

&lt;h1 id=&#34;snorkel-example:54b3ffa9aab45f436545aea0e041b607&#34;&gt;Snorkel Example&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;snorkel.h&amp;gt;

void syntax(char *pszProg)
{
    fprintf(stderr, &amp;quot;Syntax Error:\n&amp;quot;);
    fprintf(stderr, &amp;quot;%s [-i &amp;lt;index_file_directory&amp;gt;] [-p &amp;lt;port&amp;gt;]\n&amp;quot;, pszProg);
    exit(1);
}



void main(int argc, char *argv[])
{
    int i = 1;
    int port = 80;
    char *pszIndex = 0;
    char szExit[10];
    snorkel_obj_t  http = 0;

    for(; i &amp;lt; argc; i++)
    {
        if( argv[i][0] == &#39;-&#39; || argv[i][0] == &#39;/&#39; )
        {
            char carg = argv[i][1];

            switch(carg)
            {
                case &#39;p&#39;:
                    port = atoi(argv[i + 1]);
                    i++;
                    break;
                case &#39;i&#39;:
                    pszIndex = argv[i + 1];
                    i++;
                    break;
                default:
                    syntax(argv[0]);
                    break;
            }
        }
    }

    if( !pszIndex )
        syntax(argv[0]);


    if( snorkel_init() != SNORKEL_SUCCESS )
    {
        perror(&amp;quot;Could not Initialize Snorkel\n&amp;quot;);
        exit(1);
    }


    http = snorkel_obj_create(snorkel_obj_server, 2, pszIndex);
    if( !http )
    {
        perror(&amp;quot;Could not Create HTTP Server\n&amp;quot;);
        exit(1);
    }

    if( snorkel_obj_set(http, snorkel_attrib_listener, port, 0) != SNORKEL_SUCCESS )
    {
        fprintf(stderr, &amp;quot;Could not Create Listener\n&amp;quot;);
        snorkel_obj_destroy(http);
        exit(1);
    }

    if( snorkel_obj_set(http, snorkel_attrib_ipvers, IPVERS_IPV4, SOCK_SET) != SNORKEL_SUCCESS )
    {
        fprintf(stderr, &amp;quot;Error Could not Set IP Version\n&amp;quot;);
        exit(1);
    }


    fprintf(stderr, &amp;quot;\n\n[ H T T P ] Starting Embedded Server\n&amp;quot;);
    if( snorkel_obj_start(http) != SNORKEL_SUCCESS )
    {
        perror(&amp;quot;Could not Start Server\n&amp;quot;);
        snorkel_obj_destroy(http);
        exit(1);
    }

    fprintf(stderr, &amp;quot;\n[ H T T P ] Started!!\n\n&amp;quot; &amp;quot;--Hit Enter to Terminate --\n&amp;quot;);
    fgets(szExit, sizeof(szExit), stdin);
    fprintf(stderr, &amp;quot;[ H T T P ] Bye!!\n&amp;quot;);


    snorkel_obj_destroy(http);
    exit(0);
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Install BMC Control-M on Redhat Enterprise Linux</title>
      <link>http://xenostream.github.io/2017/01/install-bmc-control-m-on-redhat-enterprise-linux</link>
      <pubDate>Wed, 04 Jan 2017 15:20:10 +0930</pubDate>
      
      <guid>http://xenostream.github.io/2017/01/install-bmc-control-m-on-redhat-enterprise-linux</guid>
      <description>

&lt;h1 id=&#34;install-bmc-control-m:6c81db782dd271de9c619becf0181899&#34;&gt;Install BMC Control-M&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;  Minimal 설치(개발툴 모두 설치: 추가적으로 Java Developement는 설치)
  /etc/hosts 파일 생성(반드시!!)
  groupadd dba
  useradd -g dba -s /bin/csh ctmuser
  useradd -g dba -s /bin/csh emuser
  chmod 755 /home/ctmuser
  chmod 755 /home/emuser
  /BMC/setup.sh (chmod -R 777 /BMC 선행)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CTM/EM설치시에 미리 ctmuser로 &lt;code&gt;/home/ctmuser/pgsql/app_data/em700&lt;/code&gt; 폴터를 생성하고
  &lt;code&gt;chmod 770 em700&lt;/code&gt; 명령으로 퍼미션 생성후 CTM/EM을 설치!!&lt;/p&gt;

&lt;h1 id=&#34;control-m-7-x-gui-실행시-먹통-현상:6c81db782dd271de9c619becf0181899&#34;&gt;Control-M 7.x GUI 실행시 먹통 현상&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;GUI 설치 및 실행시 &amp;ldquo;관리자권한&amp;rdquo; 으로 실행&lt;/li&gt;
&lt;li&gt;Enterprise Manager Fixpack을 최신 상태로 설치후 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;control-m-버전별-권장-os:6c81db782dd271de9c619becf0181899&#34;&gt;Control-M 버전별 권장 OS&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Control-M v7.x == RHEL 5.x
Control-M v8.x == RHEL 6.x
Control-M v9.x == RHEL 7.x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;상기의 매핑은 별다른 설정 변경이 필요하지 않음.
Mix형태로 설치할 경우는 하기의 추가적인 패키지를 설정해야함.&lt;/p&gt;

&lt;h1 id=&#34;설치-dvd를-yum-repository로-사용:6c81db782dd271de9c619becf0181899&#34;&gt;설치 DVD를 yum Repository로 사용&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;mkdir /media/dvd                             : 마운트포인트 생성
mount -t iso9660 /dev/cdrom /media/dvd       : 마운트 


vi /etc/yum.repos.d/rhel-dvd.repo            : 설치 DVD 리포지토리 

[rhel-dvd]
name=Red Hat Enterprise Linux $releasever - $basearch - DVD
baseurl=file:///media/dvd/
gpgcheck=0

yum clean all
yum grouplist
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;mixed환경에서-사용시-설치-패키지:6c81db782dd271de9c619becf0181899&#34;&gt;Mixed환경에서 사용시 설치 패키지&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Cann&#39;t Starting Configuration Agent Problem....
 yum install libcurl.i686 libstdc++.i686 libgcc.i686 pam-devel.i686

필요시.....  
ln -s /usr/lib/libcurl.so.4.1.1 /usr/lib/libcurl.so.3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Running HUGO Server with GitHub</title>
      <link>http://xenostream.github.io/2017/01/running-hugo-server-with-github</link>
      <pubDate>Wed, 04 Jan 2017 15:08:37 +0930</pubDate>
      
      <guid>http://xenostream.github.io/2017/01/running-hugo-server-with-github</guid>
      <description>

&lt;h1 id=&#34;hugo-server-mode-start-option:ae352c56656707e5a63f12b8a271e9e5&#34;&gt;HUGO Server Mode Start &amp;amp; Option&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;cd /root/Hugo/xenostream
nohup hugo server --baseURL=http://192.168.0.10/ --port=8088 --bind=192.168.0.10 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(192.168.0.10서버에서 실행중이며, 포트는 8088로 실행하며 기본 URL은 &lt;a href=&#34;http://192.168.0.10/&#34;&gt;http://192.168.0.10/&lt;/a&gt; 작동)&lt;/p&gt;

&lt;h1 id=&#34;hugo-post-add:ae352c56656707e5a63f12b8a271e9e5&#34;&gt;HUGO Post Add&lt;/h1&gt;

&lt;p&gt;/xenostream/contents/post 디렉토리에서 기존 &lt;code&gt;md파일&lt;/code&gt;을 복사해서 편집 후 추가 또는&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo new /post/new-post.md&lt;/code&gt; 명령어로 추가(기본 헤더를 제공)&lt;/p&gt;

&lt;h1 id=&#34;hugo-post-rebuild:ae352c56656707e5a63f12b8a271e9e5&#34;&gt;HUGO Post Rebuild&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;hugo&lt;/code&gt; 명령어만 실행하면 자동으로 재빌드함&lt;/p&gt;

&lt;h1 id=&#34;md-syntax:ae352c56656707e5a63f12b8a271e9e5&#34;&gt;md syntax&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;#  헤딩

1.  숫자리스팅

&amp;gt;  강조처리(진하게 폰트증가)

&#39;&#39; 단순강조(Back Quote)
```  인용박스시작

![툴팁](/images/이미지)  그림삽입

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;http://gohugo.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://fontawesome.io/icons/&#34;&gt;http://fontawesome.io/icons/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Make Bootable USB with diskpart</title>
      <link>http://xenostream.github.io/2016/02/make-bootable-usb-with-diskpart</link>
      <pubDate>Sat, 20 Feb 2016 20:46:37 +0930</pubDate>
      
      <guid>http://xenostream.github.io/2016/02/make-bootable-usb-with-diskpart</guid>
      <description>

&lt;h1 id=&#34;diskpart로-부팅-usb만드는-순서:4201b76129eacf20a5320012091a78de&#34;&gt;diskpart로 부팅 USB만드는 순서&lt;/h1&gt;

&lt;p&gt;윈도우에서는 모든 디스크 관련 작업을 내장된 &lt;code&gt;diskpart&lt;/code&gt; 툴로 처리할 수 있습니다.&lt;br /&gt;
과거 &lt;code&gt;fdisk + format&lt;/code&gt;툴의 합체본이라고 생각하시면 됩니다.&lt;/p&gt;

&lt;p&gt;디스크 관련툴의 작업순서는 대채로 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;시스템에 설치된 디스크 리스팅&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;작업하기 원하는 디스크 선택&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;파티션 작업&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;포맷 작업&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;대부분의 경우 상기와 같은 작업으로 진행됩니다.&lt;/p&gt;

&lt;p&gt;예제로는, 윈도우 설치 &lt;code&gt;iso&lt;/code&gt;파일을 &lt;code&gt;부팅가능&lt;/code&gt;한 &lt;code&gt;설치용 USB&lt;/code&gt;로 만드는 과정입니다.&lt;br /&gt;
&lt;code&gt;UltraISO, UNetbootin...&lt;/code&gt; 등의 여러 &lt;code&gt;GUI&lt;/code&gt;도 있지만, 본 방식은 아무런 준비물이 필요없습니다.&lt;/p&gt;

&lt;p&gt;단지, 운영되는 윈도우와 만들려는 ISO파일만 있으면 됩니다. 또한, &lt;code&gt;GUI&lt;/code&gt;중에는 프로그램에서&lt;br /&gt;
해당 USB장비를 인식하지 못하는 경우도 있지만, 이 방법은 윈도우에서 인식하면 곧바로 작업할 수 있습니다.&lt;/p&gt;

&lt;p&gt;예제에서는 16G의 USB와 Windows10.iso 파일을 이용해서 설치 USB로 만드는 과정입니다.&lt;br /&gt;
필요한 경우만 화면 캡쳐를 사용합니다.  간단한 내용에 화면캡쳐를 자주 사용하니 더 혼란스럽습니다.&lt;/p&gt;

&lt;p&gt;먼저 한번만 수행해보면, 실제 사용하는 명령어만 알면 곧바로 이해할 수 있기 때문에 설치명령어부터 시작 합니다.&lt;br /&gt;
USB장비를 컴퓨터에 삽입하고, 시작합니다.  USB를 파티션을 제거 및 포맷하기 때문에,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;당연히 자료는 다 삭제됩니다.!!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;Win + R                      // 윈도우 + R키 입력후 실행 
diskpart                     // diskpart 수행 
list disk                    // 시스템에서 인식한 디스크 내역(사이즈로 구별가능)
select disk                  // 작업할 디스크 선택 (!!!!주의 반드시 작업할 디스크 선택)
clean                        // 디스크 정리 (파티션 및 관련 설정 초기화)
create partition primary     // Primary 파티션 생성 
list par                     // 파티션 내역 
select partition = 1         // 작업 파티션 선택 
active                       // 부팅가능 파티션 표시 
format quick fs=ntfs         // ntfs로 빠른(quick) 포맷 
exit                         // diskpart 종료 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;다음 그림은 과정에 대한 화면캡쳐입니다. 붉은박스가 입력 명령어 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://xenostream.github.io/images/diskpart01.jpg&#34; alt=&#34;작업내역 1&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://xenostream.github.io/images/diskpart02.jpg&#34; alt=&#34;작업내역 2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;작업은 완료되었습니다.  이제는 &lt;code&gt;windows10.iso&lt;/code&gt; 파일을 복사할 차례입니다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;iso파일 자체를 복사하는것이 아닙니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;가상디스크나 압축프로그램으로 해제한 후 iso파일내의 파일을 상기에서 작업한 USB에 &lt;code&gt;모두&lt;/code&gt;&lt;br /&gt;
복사해주면 끝 입니다.&lt;/p&gt;

&lt;p&gt;이렇게 생성한 설치용USB는 그냥 외장하드와 동일합니다. 일반 USB사용하듯이 사용해도 됩니다.&lt;br /&gt;
단, 루트의 여러 기본디렉토리 구조는 그대로 유지하기 바랍니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Oracle Driver Setting - Linux</title>
      <link>http://xenostream.github.io/2016/02/go-oracle-driver-setting---linux</link>
      <pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://xenostream.github.io/2016/02/go-oracle-driver-setting---linux</guid>
      <description>

&lt;h1 id=&#34;go-oracle-driver-setting-how-to:cfc80950fe14b5b9c47178d48dcca6a3&#34;&gt;Go Oracle Driver Setting How To&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/qt-luigi/items/fbbe6792a77b493a58f9&#34;&gt; Go  - Lang : Oracle Access used by go-oci8 on Linux &lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/mattn/go-oci8&#34;&gt;Official URL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;#1. Instant Client 설치
 instantclient-basic-linux.x64-11.2.0.4.0.zip
 instantclient-sdk-linux.x64-11.2.0.4.0.zip&lt;/p&gt;

&lt;p&gt;unzip 으로 모두 압축해제 ( tar xvpf )&lt;/p&gt;

&lt;p&gt;#2. root권한으로 심볼릭 링크 생성
 cd /home/pjkwon/Go/instantclient_11_2
 ln -s libclntsh.so.11.1 libclntsh.so&lt;/p&gt;

&lt;p&gt;#3. root권한으로 oci8.pc 생성
 &lt;code&gt;vi /usr/lib/pkgconfig/oci8.pc&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;prefix=/home/pjkwon/Go/instantclient_11_2
libdir=${prefix}
includedir=${prefix}/sdk/include/

Name: OCI
Description: Oracle database engine
Version: 11.2
Libs: -L${libdir} -lclntsh
Libs.private:
Cflags: -I${includedir}

#4. home디렉토리 .bash_profile 생성 

PATH=$PATH:$HOME/.local/bin:$HOME/bin
export PKG_CONFIG_PATH=/usr/lib/pkgconfig
export GOPATH=/home/pjkwon/Go
export PATH=$PATH:/usr/local/go/bin
export ORACLE_HOME=/home/pjkwon/Go/instantclient_11_2
export PATH=$PATH:$ORACLE_HOME
export LD_LIBRARY_PATH=$ORACLE_HOME
export NLS_LANG=American_America.KO16MSWIN949
export TNS_ADMIN=$ORACLE_HOME/network/admin
export ORACLE_SID=ORCL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#5. go-oci8 설치&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src
go get github.com/mattn/go-oci8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#6. Example 실행&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/mattn/go-oci8/_example 
go run oracle.go scott/tiger@localhost:1521/orcl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://apextips.blogspot.kr/2015/09/making-connections-to-oracle-database.html&#34;&gt;Example&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Web Programming: Perface</title>
      <link>http://xenostream.github.io/2016/02/go-web-programming-perface</link>
      <pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://xenostream.github.io/2016/02/go-web-programming-perface</guid>
      <description>

&lt;h1 id=&#34;go언어로-웹-프로그램-만들기:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;Go언어로 웹 프로그램 만들기&lt;/h1&gt;

&lt;h1 id=&#34;perface:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;Perface&lt;/h1&gt;

&lt;p&gt;Go언어를 학습함에 있어서 주제를 하나 정한 후, 여러가지 기술을 사용해서 학습하는&lt;br /&gt;
방법이 가장 효율적이라 생각되며, 이에, 웹 응용프로그램을 작성하는 것으로&lt;br /&gt;
Go언어를 학습 하겠습니다.&lt;/p&gt;

&lt;p&gt;기본적으로 다음과 같은 사항이 요구됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;웹 기본 기술에 대하여 알고 있어야 합니다.&lt;/li&gt;
&lt;li&gt;언어에 대하여 기본적인 지식이 있어야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    fmt.Println(&amp;quot;Hello, Go world!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://xenostream.github.io/post/go-web-programming/images/My.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xenostream.com&#34;&gt;XenoStream&lt;/a&gt;
######2016@ powered by &lt;a href=&#34;mailto://piljin.kwon@gmail.com&#34;&gt;PilJin.Kwon&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Web Programming: [01/00] Intro</title>
      <link>http://xenostream.github.io/2016/02/go-web-programming-01/00-intro</link>
      <pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://xenostream.github.io/2016/02/go-web-programming-01/00-intro</guid>
      <description>

&lt;h1 id=&#34;intro:6a07050414416ef66304d8a9113cb88a&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;먼저, &lt;code&gt;Go언어&lt;/code&gt;의  세계로 오신걸 &lt;code&gt;환영&lt;/code&gt;합니다!!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;21세기 C언어&lt;/code&gt;라고 불리는 Go언어는 빠른 컴파일 시간과, 실행파일 내에 가베지 컬렉터를 내장하고 있으며,&lt;br /&gt;
동시성 프로그래밍이 언어의 기본 기능으로 장착되어 있는 현대적인 언어 입니다.&lt;/p&gt;

&lt;p&gt;대표적으로 다음과 같은 Go언어만의 장점이 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;아주 큰 프로젝트도 몇 초만에 컴파일 할 수 있습니다.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;C언어의 문제점 중 하나인 헤더파일이 혼재된 상황이 발생하지 않습니다.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;정적타입 언어이므로, 타입 혼재로 인한 혼란이 야기되지 않습니다.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;경량의 객체지향 프로그래밍이 가능 합니다.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;쓰레기 수집기능이 실행파일 내에 내장되므로, 별도의 메모리 관리가 필요 없습니다.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;GC기능 내장으로 고루틴 및 채널의 기능이 강화 됩니다.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;최신의 하드웨어 사양인 멀티코어를 언어 수준에서 지원 합니다.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Go언어는 &lt;strong&gt;컴파일형 언어&lt;/strong&gt;입니다.!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;동적 언어의 빠른 개발 효율과 정적 언어의 속도 및 안정성 등의 장점만을 흡수하여 개발된 언어 입니다.&lt;br /&gt;
또한 최신의 IT환경에 맞도록, 멀티 코어와 네트워크에 최적화된 개발 언어입니다.&lt;/p&gt;

&lt;p&gt;풍부한 표현식, 경량의 타입시스템, 네이티브 동시성 모델 지원, 가베지 콜렉션 메모리 자동관리 등이
언어에서 기본적으로 지원하고 있습니다. 다른언어에서는 이러한 기능을 &lt;code&gt;패키지&lt;/code&gt;나 &lt;code&gt;툴&lt;/code&gt;로 제공하고 있습니다.&lt;/p&gt;

&lt;p&gt;1장에서는 이러한 &lt;code&gt;Go&lt;/code&gt;언어를 시스템에 설치하고 환경 설정하는 것에 대해서 설명하도록 하겠습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Web Programming: [01/01] Installation</title>
      <link>http://xenostream.github.io/2016/02/go-web-programming-01/01-installation</link>
      <pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://xenostream.github.io/2016/02/go-web-programming-01/01-installation</guid>
      <description>

&lt;h1 id=&#34;installation:ff14a3c2d45e25c07d33525472b59348&#34;&gt;Installation&lt;/h1&gt;

&lt;h2 id=&#34;3가지-설치-방법:ff14a3c2d45e25c07d33525472b59348&#34;&gt;3가지 설치 방법&lt;/h2&gt;

&lt;p&gt;개발자의 컴퓨터에 &lt;code&gt;Go언어&lt;/code&gt;를 위한 개발환경을 구축하는 방법에는 여러가지가 존재합니다.&lt;br /&gt;
그중 대표적인 3가지 방법에 알아보도록 하겠습니다.&lt;br /&gt;
물론 이 3가지 방법이 정석은 아니며, 개발자의 능력대로 수동으로 설치해도 아무런 문제가 없습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go언어의 &lt;code&gt;공식 설치 패키지&lt;/code&gt; 이용&lt;br /&gt;
Go언어의 공식 홈페이지에서 윈도우/리눅스/매킨토시용으로 다운로드 한 후 설치하는&lt;br /&gt;
가장 표준적인 방법 입니다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;소스코드에서 컴파일 한 후 직접 설치&lt;br /&gt;
개발자에게 친숙한 방법으로, 유닉스에서 일반적인 패키지를 설치하는 방법과 동일 합니다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;제3자 유틸리티를 이용해서 설치&lt;br /&gt;
Go언어를 설치하는 방법은 운영체제마다 별도의 패키지 설치용 도구를 이용 합니다.&lt;br /&gt;
예를들어, 우분투 리눅스 계열의 &lt;code&gt;apt-get&lt;/code&gt;과 맥OS의 &lt;code&gt;homebrew&lt;/code&gt;등을 이용하는 방법 입니다.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;어떠한 방법을 사용해서라도 설치하면 동일한 개발 환경을 갖추게 됩니다. 이제 각각의 방법에 대하여,&lt;br /&gt;
간단히 설명하도록 하겠습니다. 하기의 방법은 시간이 지나면 변할 수도 있으니, 참고하시기 바랍니다.&lt;/p&gt;

&lt;h3 id=&#34;소스코드로-설치:ff14a3c2d45e25c07d33525472b59348&#34;&gt;소스코드로 설치&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Go언어&lt;/code&gt;의 일부분은 &lt;code&gt;Plan 9 C&lt;/code&gt; 컴파일러와 &lt;code&gt;AT&amp;amp;T&lt;/code&gt; 어셈블러를 이용해서 구현되어 있습니다.&lt;br /&gt;
소스코드에서  설치하기 위해서는 운영체제에 &lt;code&gt;C 컴파일러&lt;/code&gt;가 미리 설치되어 있어야만 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;매킨토시&lt;/strong&gt;의 경우 XCode 툴을 설치하셨다면, 이미 C컴파일러 설치가 완료된 상황 입니다.&lt;br /&gt;
&lt;strong&gt;유닉스/리눅스&lt;/strong&gt;의 경우에는 &lt;code&gt;gcc&lt;/code&gt;를 설치하셔야  합니다.&lt;/p&gt;

&lt;p&gt;예를들어 우분투 리눅스에서는 &lt;code&gt;apt-get&lt;/code&gt; 명령어를 사용하여 gcc를 설치하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; sudo apt-get install gcc libc6-dev    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;윈도우&lt;/strong&gt;의 경우에는 &lt;code&gt;MinGW&lt;/code&gt; 컴파일러를 설치하면  &lt;code&gt;gcc&lt;/code&gt;와 호환 됩니다.&lt;br /&gt;
또한, 사용하는 운영체제의 비트수에 맞는 컴파일러를 설치하시기 바랍니다.&lt;/p&gt;

&lt;p&gt;만약, &lt;strong&gt;윈도우&lt;/strong&gt;를 사용하여 패키지를 설치한 경우에는 자동으로 환경변수가 등록 됩니다.&lt;br /&gt;
&lt;strong&gt;유닉스&lt;/strong&gt;류의 운영체제에서 설치할 경우에는 수동으로 &lt;code&gt;환경변수&lt;/code&gt;를 등록하여야 합니다.&lt;/p&gt;

&lt;p&gt;다음과 같은 명령을 사용하여 &lt;code&gt;수동으로 환경변수를 등록&lt;/code&gt;합니다.(&lt;code&gt;.bashrc / .bash_profile&lt;/code&gt; 파일)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   export GOROOT=$HOME/go  
   export GOBIN=$GOROOT/bin
   export PATH=$PATH:$GOROOT/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;쉘 상태에서 &lt;code&gt;go*&lt;/code&gt; 명령을 사용하면 다음과 같이 표시 됩니다.
&lt;img src=&#34;http://xenostream.github.io/post/go-web-programming/images/1.1.mac.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&amp;lt;그림1.1&amp;gt; 소스코드로 설치한 후 go명령 입력화면&lt;/p&gt;

&lt;p&gt;상기와 같이 표시 되었다면 정상적으로 Go언어의 개발환경을 갖추게 된 것입니다.&lt;br /&gt;
만약  &lt;code&gt;no such command~~~~&lt;/code&gt; 와 같은 에러메세지가 표시 되었다면, &lt;code&gt;$PATH&lt;/code&gt; 환경변수를&lt;br /&gt;
살펴 보시기 바랍니다. Go언어가 설치된 디렉토리의 &lt;code&gt;bin&lt;/code&gt; 디렉토리에 경로가 설정되지 않아서&lt;br /&gt;
발생하는 문제 입니다.&lt;/p&gt;

&lt;h3 id=&#34;표준-설치-패키지로-설치:ff14a3c2d45e25c07d33525472b59348&#34;&gt;표준 설치 패키지로 설치&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Go언어&lt;/code&gt;는 단순 클릭만으로 시스템에 개발환경을 설치할 수있는 &lt;code&gt;표준 설치 패키지&lt;/code&gt;를&lt;br /&gt;
제공 합니다.(Mac / Windows / Linux / ARM / Mainframe&amp;hellip;)&lt;/p&gt;

&lt;p&gt;기본적으로 표준 설치 패키지는 &lt;code&gt;/usr/local/go&lt;/code&gt; (윈도우의 경우 &lt;code&gt;c:\Go&lt;/code&gt;) 디렉토리에 설치 합니다.&lt;br /&gt;
당연히, 상기의 경로는 설치과정에서 변경해서 사용할 수 있습니다. 물론 변경해서 설치 했다면,&lt;br /&gt;
환경변수들을 체크해 보시기 바랍니다.&lt;/p&gt;

&lt;h4 id=&#34;32비트-64비트-환경-알아내기:ff14a3c2d45e25c07d33525472b59348&#34;&gt;32비트 / 64비트 환경 알아내기.&lt;/h4&gt;

&lt;p&gt;다음단계로 진행할려면, 설치하는 &lt;code&gt;운영체제의 비트수&lt;/code&gt;가 문제가 되므로, 먼저 운영체제가 몇 비트로&lt;br /&gt;
운영 되는지를 알아 보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;윈도우&lt;/strong&gt;의 경우에는 &lt;code&gt;윈도우키 + R&lt;/code&gt;을 눌르신 후, &lt;code&gt;systeminfo&lt;/code&gt; 명령을 입력 합니다.&lt;br /&gt;
&lt;code&gt;systeminfo&lt;/code&gt; 명령어는 현재 운영되는 운영체제에 대한 다양한 정보를 표시 합니다.&lt;br /&gt;
&lt;code&gt;시스템타입&lt;/code&gt;&lt;code&gt;부분을 찾아보시면,&lt;/code&gt;x64-based PC&lt;code&gt;라는 부분이 표시되면,&lt;/code&gt;64비트`` 운영체제 입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;매킨토시&lt;/strong&gt;의 경우는 32비트에서 벗어난지 오래되므로, &lt;code&gt;64비트 환경으로만 운영&lt;/code&gt; 됩니다.&lt;br /&gt;
&lt;strong&gt;리눅스/유닉스&lt;/strong&gt;의 경우에는 &lt;code&gt;uname -a&lt;/code&gt; 명령어를 입력하시면 운영되는 비트수가 표시 됩니다.&lt;br /&gt;
우분투 리눅스의 경우는 대체로 다음과 같은 문구가 표시되게 됩니다. 표시되는 내용을 다를 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;some description&amp;gt; x86_64 x86_64 x86_64 GNU/Linux
// some machines such as Ubuntu 10.04 will show as following
x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;32비트 운영체제의 경우는 대체로(?) 다음과 같이 표시 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;some description&amp;gt; i686 i686 i386 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;매킨토시:ff14a3c2d45e25c07d33525472b59348&#34;&gt;매킨토시&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Go언어&lt;/code&gt;의  &lt;a href=&#34;http://code.google.com/p/go/downloads/list&#34;&gt;다운로드 페이지&lt;/a&gt;로 이동 합니다.&lt;br /&gt;
&lt;code&gt;go1.x.x.darwin-amd64.pkg&lt;/code&gt; 파일을 선택해서 다운로드 하시기 바랍니다.(64비트 매킨토시의 경우)&lt;br /&gt;
다운로드 후, 탐색기(파인더)에서 더블 클릭하신 후 대부분 &amp;ldquo;다음&amp;rdquo; 버튼을 눌르시면 설치가 완료 됩니다.&lt;br /&gt;
매킨토시의 경우 &lt;code&gt;$PATH&lt;/code&gt; 환경변수를 자동으로 추가해 주게 됩니다. 터미널 프로그램을 실행하신 후&lt;br /&gt;
&lt;code&gt;go&lt;/code&gt; 명령을 입력하시면, 상기 그림1.1 과 같이 여러가지 정보가 표시 됩니다.&lt;/p&gt;

&lt;h3 id=&#34;유닉스-리눅스:ff14a3c2d45e25c07d33525472b59348&#34;&gt;유닉스 / 리눅스&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Go언어&lt;/code&gt;의 &lt;a href=&#34;http://code.google.com/p/go/downloads/list&#34;&gt;다운로드 페이지&lt;/a&gt;로 이동 합니다.&lt;br /&gt;
&lt;code&gt;go1.*.*.linux-amd64.tar.gz&lt;/code&gt; 파일을 선택한 후 다운로드 합니다.(&lt;code&gt;64비트&lt;/code&gt;의 경우)&lt;br /&gt;
환경변수 &lt;code&gt;$GO_INSTALL_DIR&lt;/code&gt;을 설정하면 설정된 디렉토리에 설치되게 됩니다.&lt;br /&gt;
다운로드 후, 압축을 해제 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar xvzf go1.x.x.linux-amd64.tar.gz -C $GO_INSTALL_DIR
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;상기와 같이 설정된 디렉토리에 압축을 해제 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=$PATH:$GO_INSTALL_DIR/go/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;상기의 명령과 같이 환경변수를 설정 합니다. (&lt;code&gt;.bashrc / .bash_profile&lt;/code&gt; 파일에 적용)&lt;br /&gt;
터미널 프로그램을 실행하신 후,  &lt;code&gt;go&lt;/code&gt; 명령을 입력하시면, 상기 그림1.1 과 같이 여러가지&lt;br /&gt;
정보가 표시 됩니다.&lt;/p&gt;

&lt;h3 id=&#34;윈도우:ff14a3c2d45e25c07d33525472b59348&#34;&gt;윈도우&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Go언어&lt;/code&gt;의 &lt;a href=&#34;http://code.google.com/p/go/downloads/list&#34;&gt;다운로드 페이지&lt;/a&gt;로 이동 합니다.&lt;br /&gt;
&lt;code&gt;go1.*.*.windows-amd64.msi&lt;/code&gt; 파일을 선택한 후 다운로드 합니다.(&lt;code&gt;64비트&lt;/code&gt;의 경우)&lt;/p&gt;

&lt;p&gt;윈도우 탐색기로 다운로드한 파일을 더블클릭 하신 후 &amp;ldquo;다음&amp;rdquo; 버튼을 눌러서 설치를 완료 합니다.&lt;br /&gt;
&lt;code&gt;c:\go\bin&lt;/code&gt; 경로를 환경변수에 자동으로 추가하게 됩니다.&lt;br /&gt;
&lt;strong&gt;윈도우&lt;/strong&gt;의 경우에는 &lt;code&gt;윈도우키 + R&lt;/code&gt; 을 눌르신 후, &lt;code&gt;go&lt;/code&gt; 명령을 입력 합니다.&lt;br /&gt;
상기 그림1.1 과 같이 여러가지 정보가 표시 됩니다.&lt;/p&gt;

&lt;h2 id=&#34;제-3자-설치-유틸리티로-설치:ff14a3c2d45e25c07d33525472b59348&#34;&gt;제 3자 설치 유틸리티로 설치&lt;/h2&gt;

&lt;h3 id=&#34;gvm:ff14a3c2d45e25c07d33525472b59348&#34;&gt;GVM&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;GVM&lt;/code&gt;은 Go언어를 여러가지 버전으로 설치해서 사용할 경우 사용하는 유틸리티 입니다.&lt;br /&gt;
사용하기 쉽다는 장점이 있습니다. gvm을 설치하신후 다음의 명령을 터미널에 입력해서 설치 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bash &amp;lt; &amp;lt;(curl -s https://raw.github.com/moovweb/gvm/master/binscripts/gvm-installer)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;다음으로 Go언어를 설치 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gvm install go1.0.3
gvm use go1.0.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;완료 되었다면, 모든 설정은 이미 완료된 것입니다. (환경변수 설정을 별도로 할 필요가 없습니다.)&lt;/p&gt;

&lt;h3 id=&#34;apt-get:ff14a3c2d45e25c07d33525472b59348&#34;&gt;apt-get&lt;/h3&gt;

&lt;p&gt;우분투 계열의 리눅스에서는 &lt;code&gt;apt-get&lt;/code&gt; 명령어로 대부분의 패키지를 설치할 수 있습니다.&lt;br /&gt;
다음의 명령을 입력하여 설치 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:gophers/go
sudo apt-get update
sudo apt-get install golang-stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이상으로, 운영체제별로 &lt;code&gt;Go개발환경&lt;/code&gt;을 설치하는 것에 대해서 알아 보았습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Web Programming: [01/02] GOPATH &amp; Working Directory</title>
      <link>http://xenostream.github.io/2016/02/go-web-programming-01/02-gopath--working-directory</link>
      <pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://xenostream.github.io/2016/02/go-web-programming-01/02-gopath--working-directory</guid>
      <description>

&lt;h1 id=&#34;gopath-및-작업-디렉토리:810b9d1b9c37d8356f62b59201217059&#34;&gt;$GOPATH 및 작업 디렉토리&lt;/h1&gt;

&lt;h2 id=&#34;gopath:810b9d1b9c37d8356f62b59201217059&#34;&gt;$GOPATH&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Go&lt;/code&gt; 명령어를 이용할 경우 대부분의 작업은 &lt;code&gt;$GOPATH&lt;/code&gt;라는 환경변수에 &lt;code&gt;절대적&lt;/code&gt;으로 의존하게 됩니다.&lt;br /&gt;
설치시 사용했었던, &lt;code&gt;$GOROOT&lt;/code&gt; 환경변수와는 별개로 작동하는 변수입니다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;개발자가 작성한 모든 패키지의 루트가 되는 디렉토리를 지정합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;대부분의 경우 워크스페이스라고 부르는 프로젝트의 루트 디렉토리를 지정하는 것입니다.&lt;br /&gt;
유닉스 계열의 운영체제에서는 다음과 같이 설정합니다. (사용자는 xeno이며, 홈디렉토리의 mygo )&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export GOPATH=/home/xeno/mygo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;윈도우의 경우에는 별도로 &lt;code&gt;GOPATH&lt;/code&gt; 환경변수를 생성한 후 설정하여야 합니다.&lt;br /&gt;
&lt;code&gt;go get&lt;/code&gt; 명령을 사용해서 원격 저장소의 소스를 받아올때 &lt;code&gt;GOPATH&lt;/code&gt;에 설정된 디렉토리를 기준으로&lt;br /&gt;
작업하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$GOPATH&lt;/strong&gt; 디렉토리에는 &lt;code&gt;반드시&lt;/code&gt;` 다음과 같이 3개의 디렉토리가 존재해야 합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;소스코드&lt;/code&gt;가 저장될 디렉토리 ( .go, .c, .g, .s &amp;hellip; )&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkg&lt;/code&gt;&lt;br /&gt;
컴파일 후 &lt;code&gt;라이브러리 파일&lt;/code&gt;이저장될 디렉토리 ( .a &amp;hellip; )&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bin&lt;/code&gt;&lt;br /&gt;
빌드 후 &lt;code&gt;실행파일&lt;/code&gt;이 저장될 디렉토리 : go install 명령 사용 ( .exe &amp;hellip; )&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;본 가이드에서는 &lt;code&gt;mygo 디렉토리&lt;/code&gt;를 &lt;code&gt;GOPATH&lt;/code&gt;로 사용하게 됩니다.&lt;/p&gt;

&lt;h3 id=&#34;패키지-디렉토리:810b9d1b9c37d8356f62b59201217059&#34;&gt;패키지 디렉토리&lt;/h3&gt;

&lt;p&gt;예를들어, &lt;code&gt;$GOPATH/src/mymath/sqrt.go&lt;/code&gt;라는 소스파일을 생성할 경우(mymath가 패키지이름)&lt;br /&gt;
패키지 이름과 디렉토리 명을 &lt;code&gt;통일&lt;/code&gt;` 시켜서 각각의 패키지들을 구분해서 사용하게 됩니다.&lt;/p&gt;

&lt;p&gt;대형 프로젝트나 외부에 노출할 패키지의 경우에는 다중 경로명을 사용해서 패키지를 구별할 수 있습니다.&lt;br /&gt;
&lt;code&gt;github.com/xenostream/mymath&lt;/code&gt;와 같은 경우가 그예입니다. (각각의 이름은 디렉토리 이름입니다.)&lt;/p&gt;

&lt;p&gt;상기와 같이 패키지를 저장 했다면, 다음과 같이 디렉토리를 생성 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src
mkdir -p github.com/xenostream/mymath
cd $GOPATH/src/github.com/xenostream/mymath
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sqrt.go 라는 파일을 생성한 후 다음과 같이 입력합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Source code of $GOPATH/src/github.com/xenostream/mymath/sqrt.go
package mymath

func Sqrt(x float64) float64 {
    z := 0.0
    for i := 0; i &amp;lt; 1000; i++ {
        z -= (z*z - x) / (2 * x)
    }
    return z
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;강제사항은 아니지만, 최대한 패키지이름의 디렉토리를 생성해서 사용하시기 바랍니다.&lt;br /&gt;
해당 패키지에 연관된 소스를 한데모아서 사용하는 것이 &lt;code&gt;패키지&lt;/code&gt;` 입니다.&lt;/p&gt;

&lt;h3 id=&#34;패키지-컴파일:810b9d1b9c37d8356f62b59201217059&#34;&gt;패키지 컴파일&lt;/h3&gt;

&lt;p&gt;상기의 명령을 통해서 패키지를 이미 생성했습니다.  이제 소스파일을 컴파일하는 것에 대해서&lt;br /&gt;
설명 합니다. 컴파일하는 방법은 대체로 다음과 같이 두가지 방법이 있습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;컴파일 할 소스 디렉토리로 이동 한 후 &lt;code&gt;go install&lt;/code&gt; 명령으로 컴파일&lt;/li&gt;
&lt;li&gt;상기 명령에서 확장자를 뺀, 패키지명으로 컴파일 &lt;code&gt;go install mymath&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;상기의 예제코드에는
&amp;gt; &lt;code&gt;main 패키지&lt;/code&gt;가 없으므로, 라이브러리 패키지 입니다.&lt;/p&gt;

&lt;p&gt;그래서 다음과같은 디렉토리에 해당 결과물이 생성 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$GOPATH/pkg/${GOOS}_${GOARCH}
mymath.a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;.a&lt;/strong&gt; 확장자의 의미는 바이너리 패키지를 의미 합니다.&lt;br /&gt;
이제 생성한 라이브러리 패키지를 사용 하겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src
mkdir mathapp
cd mathapp
vi main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;상기 명령으로 mymath 패키지를 실제로 사용할 프로그램을 작성하는 것입니다.&lt;br /&gt;
다음과 같이 코드를 입력 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//$GOPATH/src/mathapp/main.go 
package main

import (
    &amp;quot;mymath&amp;quot;
    &amp;quot;fmt&amp;quot;
)

func main() {
    fmt.Printf(&amp;quot;Hello, world. Sqrt(2) = %v\n&amp;quot;, mymath.Sqrt(2))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이미 설명했던 컴파일 방법으로(&lt;code&gt;cd $GOPATH/src/mathapp; go install&lt;/code&gt;) 프로그램을 컴파일 합니다.&lt;br /&gt;
main 함수를 가지고 있는 main 패키지이므로 &lt;code&gt;$GOPATH/bin&lt;/code&gt; 디렉토리에 결과물이 생성 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/bin
./mathapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;상기의 명령으로 작성한 프로그램을 컴파일 한 후 실행 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Hello world. Sqrt(2) = 1.414213562373095
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;원격-패키지-설치:810b9d1b9c37d8356f62b59201217059&#34;&gt;원격 패키지 설치&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Go언어&lt;/code&gt;는 원격 패키지를 설치할 수 있는 기능을 제공 합니다. &lt;code&gt;go get&lt;/code&gt; 명령을 이용하면, 여러가지&lt;br /&gt;
원격 저장소에 저장된 패키지를 가져와서 사용할 수 있게 됩니다.&lt;br /&gt;
&lt;code&gt;GitHub, Google Code, BitBurket, Launchpad&lt;/code&gt; 등&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/xenostream/mymath
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;상기와 같이 명령하면 해당 패키지를 &lt;code&gt;$GOPATH/src&lt;/code&gt; 디렉토리 밑에 디렉토리 구조를 유지한 채 가져 옵니다.&lt;br /&gt;
&lt;code&gt;go get -u 패키지이름&lt;/code&gt;` 과 같이 사용할 경우 최신버전으로 업데이트 하게 됩니다.  또한, 패키지 내부에서&lt;br /&gt;
사용하는 또다른 패키지 또한 함께 가져오게 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$GOPATH
    src
     |-github.com
          |-xenostream
               |-mymath
    pkg
     |--${GOOS}_${GOARCH}
          |-github.com
               |-xenostream
                    |-mymath.a

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;go get&lt;/code&gt; 명령을 사용하면 상기와 같은 구조로 생성 됩니다.  사실 원격패키지의 &lt;code&gt;복사본&lt;/code&gt;을 가져오게 됩니다.&lt;br /&gt;
이미 말씀드렸듯이, &lt;code&gt;$GOPATH/src&lt;/code&gt; 디렉토리 밑에 생성 됩니다.&lt;/p&gt;

&lt;p&gt;상기와 같이 원격 패키지를 가져왔다면, 사용을 하려는 소스에서 다음과 같이 선언해서 사용 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &amp;quot;github.com/xenostream/mymath
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;최종-디렉토리-구조:810b9d1b9c37d8356f62b59201217059&#34;&gt;최종 디렉토리 구조&lt;/h3&gt;

&lt;p&gt;지금까지의 명령어와 스텝을 수행 했다면 다음과 같은 디렉토리 구조를 가지게 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bin/
    mathapp
pkg/
    ${GOOS}_${GOARCH} 예)darwin_amd64, linux_amd64
  mymath.a
  github.com/
    xenostream/
      mymath.a
src/
    mathapp
        main.go
    github.com/
        xenostream/
            mymath/
                sqrt.go

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;bin&lt;/strong&gt;디렉토리에 실행파일이 생성되고, &lt;strong&gt;src&lt;/strong&gt;디렉토리에 소스가 저장되며, &lt;strong&gt;pkg&lt;/strong&gt;디렉토리에&lt;br /&gt;
컴파일된 라이브러리가 존재한다고 생각하시면 됩니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Web Programming: [01/03] GO Command</title>
      <link>http://xenostream.github.io/2016/02/go-web-programming-01/03-go-command</link>
      <pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://xenostream.github.io/2016/02/go-web-programming-01/03-go-command</guid>
      <description>

&lt;h1 id=&#34;go-command:3cf30c7269ed4c90ef7f8fc7648b5359&#34;&gt;Go Command&lt;/h1&gt;

&lt;h2 id=&#34;go-명령어:3cf30c7269ed4c90ef7f8fc7648b5359&#34;&gt;Go 명령어&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Go 언어&lt;/code&gt;는 명령어로만 모든 작업을 할 수 있는 환경을 제공 합니다.&lt;br /&gt;
바로, &lt;code&gt;go&lt;/code&gt; 명령어로 수행합니다. 명령창에서 &lt;em&gt;go&lt;/em&gt; 명령을 입력하면 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://xenostream.github.io/post/go-web-programming/images/1_3_go.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
 &amp;lt;그림 1. 3&amp;gt; go 명령어 화면&lt;/p&gt;

&lt;h2 id=&#34;go-build:3cf30c7269ed4c90ef7f8fc7648b5359&#34;&gt;go build&lt;/h2&gt;

&lt;p&gt;컴파일 타입 언어의 컴파일 명령에 속합니다. 연관된 패키지가 있다면 같이 컴파일 합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.2절에서 보았듯이 &lt;code&gt;main&lt;/code&gt; 패키지가 존재하지 않는다면, *go build*명령어를 사용해도&lt;br /&gt;
실행파일을 생성하지 않습니다. (라이브러리 패키지)&lt;br /&gt;
&lt;code&gt;$GOPATH/pkg&lt;/code&gt; 디렉토리에 컴파일된 라이브러리 파일을 만들려면 &lt;code&gt;go install&lt;/code&gt;명령을&lt;br /&gt;
사용하시기 바랍니다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;main&lt;/code&gt;패키지를 가지고 있다면,(응용프로그램 패키지) 현재 디렉토리에 실행파일을 생성하게 됩니다.&lt;br /&gt;
&lt;code&gt;$GOPATH/bin&lt;/code&gt; 디렉토리에 실행파일을 생성하기 원한다면, &lt;code&gt;go install&lt;/code&gt; 또는&lt;br /&gt;
&lt;code&gt;go build -o ${PATH}/a.exe&lt;/code&gt;와 같이 원하는 파일을 지정하면 됩니다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;현재 디렉토리에 많은 소스파일이 존재한다면, 컴파일을 원하는 파일명을 지정하면 됩니다.&lt;br /&gt;
예를들어 *a.go*파일만을 컴파일 하려면, &lt;code&gt;go build a.go&lt;/code&gt; 라는 명령을 수행하시기 바랍니다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;컴파일할때 실행 파일이름을 지정할 수 있습니다. 예를 들어서, *mathapp*프로그램의 결과 파일을&lt;br /&gt;
&lt;strong&gt;xeno.exe&lt;/strong&gt;로 지정하기 위해서는 다음과 같이 명령합니다. &lt;code&gt;go build -o xeno.exe&lt;/code&gt;&lt;br /&gt;
기본적으로 생성하는 실행파일 이름은 디렉토리 이름으로 생성됩니다. (main패키지가 포함된&amp;hellip;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;go build&lt;/code&gt; 명령으로 컴파일 할 경우 &lt;code&gt;_ (언더바) 또는 . (점)&lt;/code&gt;으로 시작하는 파일은 컴파일에서 제외합니다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;만약, 운영체제별로 그에 맞는 파일만 컴파일 할 경우에는, &lt;code&gt;array_&lt;/code&gt;라는 접두어로 파일명을 지정해서&lt;br /&gt;
처리합니다.(예: &lt;code&gt;array_linux.go | array_darwin.go | array_windows.go&lt;/code&gt;)&lt;br /&gt;
현재 운영체제가 리눅스일 경우에는 &lt;em&gt;array_linux.go&lt;/em&gt; 파일만 컴파일 하게 됩니다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;go-clean:3cf30c7269ed4c90ef7f8fc7648b5359&#34;&gt;go clean&lt;/h2&gt;

&lt;p&gt;컴파일러가 컴파일 할 때 생성했던 모든 파일을 제거하는 작업 입니다. 컴파일 시에 생성되는 파일에는&lt;br /&gt;
다음과 같은 파일이 존재할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_obj
_test/
_testmain.go
test.out
build.out
*.[568ao]
DIR(.exe)
DIR.test(.exe)
MAINFILE(.exe)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이 명령은 &lt;code&gt;GitHub.Com&lt;/code&gt;에 소스를 올리기 &lt;strong&gt;직전에 수행하여&lt;/strong&gt;, 필요한 파일만 업로드할 경우에 주로 사용 합니다.&lt;/p&gt;

&lt;h2 id=&#34;go-fmt-gofmt:3cf30c7269ed4c90ef7f8fc7648b5359&#34;&gt;go fmt / gofmt&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;C/C++/Java&lt;/code&gt;와 같은 언어에서의 항상 고민되는 문제는 &lt;code&gt;코딩스타일&lt;/code&gt;이 사람마다 다르기 때문에, 다른사람이&lt;br /&gt;
작성한 소스코드를 읽을 경우 읽기가 힘들다는 문제가 발생하는 것입니다. (&lt;code&gt;KR&amp;amp;C / ANSI-C ...&lt;/code&gt;)&lt;br /&gt;
하지만, &lt;strong&gt;Go&lt;/strong&gt;언어에서는 이러한 문제가 발생하지 않습니다. &lt;code&gt;한가지 코딩스타일&lt;/code&gt;만 존재하고 &lt;strong&gt;강제적&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;p&gt;예를 들어서,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;여는 중괄호(&lt;code&gt;{&lt;/code&gt;)는 반드시 문장의 끝에서만 열어야만 합니다.&lt;br /&gt;
이것은 강제적입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이러한 코딩 규칙을 별도로 배둘 필요는 없습니다. 바로 &lt;code&gt;go fmt&lt;/code&gt;명령이 존재하기 때문입니다.&lt;br /&gt;
&lt;strong&gt;go fmt&lt;/strong&gt;명령은 소스코드를 *go*언어의 코딩스타일에 맞도록 자동으로 소스코드를 정렬해 주는 명령입니다.&lt;/p&gt;

&lt;p&gt;하지만, 이 명령을 별도로 수행하는 경우는 자주 없습니다. &lt;strong&gt;Go IDE&lt;/strong&gt;들에서 이것을 자동으로 처리하기&lt;br /&gt;
때문입니다. 대부분의 경우 소스코드를 컴파일 하거나, 저장할 경우에 자동으로 *go fmt*명령을 수행 합니다.&lt;/p&gt;

&lt;p&gt;실제로 &lt;code&gt;go fmt&lt;/code&gt;명령은 &lt;code&gt;gofmt&lt;/code&gt; 명령 파일의 대체이름일 뿐 입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gofmt -w &amp;lt;소스파일명&amp;gt;&lt;/code&gt; 옵션은 정렬한 소스코드를 현재 소스코드에 곧바로 적용할 때 사용 합니다.&lt;/p&gt;

&lt;h2 id=&#34;go-get:3cf30c7269ed4c90ef7f8fc7648b5359&#34;&gt;go get&lt;/h2&gt;

&lt;p&gt;이 명령은 &lt;code&gt;원격저장소&lt;/code&gt;에 저장된 소스코드를 가져오는 명령 입니다. &lt;code&gt;BitBucket, Github, Google Code&lt;/code&gt;등의&lt;br /&gt;
현재 유용하게 사용하는 원격저장소 서비스에 접속해서 해당하는 패키지의 소스를 가져오게 됩니다.&lt;br /&gt;
이 명령은 실제로는 두가지 작업으로 처리되게 됩니다. 첫 번째는 먼저 소스코드를 다운로드 합니다.&lt;br /&gt;
그리고 다운로드 받은 소스코드를 &lt;code&gt;go install&lt;/code&gt;명령을 호출해서 현재 시스템에 설치하는 작업을 수행합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go help remote&lt;/code&gt; 명령을 통해서 현재 지원되는 원격저장소에 관련된 도움말을 볼 수 있습니다.&lt;/p&gt;

&lt;h2 id=&#34;go-install:3cf30c7269ed4c90ef7f8fc7648b5359&#34;&gt;go install&lt;/h2&gt;

&lt;p&gt;소스코드를 컴파일 하고, 패키지가 생성하는 중요한 파일을 &lt;code&gt;$GOPATH/pkg 또는 $GOPATH/bin&lt;/code&gt; 디렉토리에&lt;br /&gt;
복사한 후 &lt;code&gt;설치&lt;/code&gt;하는 명령어 입니다.&lt;/p&gt;

&lt;h2 id=&#34;go-test:3cf30c7269ed4c90ef7f8fc7648b5359&#34;&gt;go test&lt;/h2&gt;

&lt;p&gt;이 명령은 &lt;code&gt;*-test.go&lt;/code&gt; 형식으로 사용하며, 테스트용 파일로 생성하며 다음과 같이 실행 정보를 표시 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ok   archive/tar     0.011s
FAIL archive/tar     0.02s
ok   compress/gzip   0.033s
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;go help testflag&lt;/code&gt; 명령을 통해서 보다 자세한 사항을 살펴 볼 수 있습니다.&lt;/p&gt;

&lt;h2 id=&#34;go-doc:3cf30c7269ed4c90ef7f8fc7648b5359&#34;&gt;go doc&lt;/h2&gt;

&lt;p&gt;대부분의 개발자들은 별도의 도움말 및 문서화 시스템을 사용하는 것을 원하지 않습니다. 개발 환경에서 자체적으로&lt;br /&gt;
제공하기를 바랍니다.(Java의 javadoc) *Go*언어에서는 &lt;code&gt;기본적&lt;/code&gt;으로 문서화 기능을 제공 합니다.&lt;/p&gt;

&lt;p&gt;*Go*언어에서 기본적으로 제공하는 패키지에 대하여 문서를 생성하려면, &lt;code&gt;godoc builtin&lt;/code&gt;명령 형식으로&lt;br /&gt;
사용하면 됩니다. 예를 들어, &lt;code&gt;net/http&lt;/code&gt; 패키지에 대한 문서는 &lt;code&gt;godoc net/http&lt;/code&gt;명령을 사용 합니다.&lt;br /&gt;
또한, &lt;code&gt;fmt.Printf&lt;/code&gt; 함수에 대한 문서를 보려면 &lt;code&gt;godoc fmt Printf&lt;/code&gt;와 같이 사용 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;godoc -http=:8080&lt;/code&gt;명령을 사용하면, 웹 브라우저를 열고 &lt;code&gt;http://127.0.0.1:8080&lt;/code&gt;주소를&lt;br /&gt;
입력해서 웹 브라우저에서 내용을 살펴볼 수 있습니다.&lt;/p&gt;

&lt;h2 id=&#34;etc:3cf30c7269ed4c90ef7f8fc7648b5359&#34;&gt;Etc&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;go&lt;/code&gt;에서는 다음과 같은 명령들도 제공 합니다. &lt;code&gt;go help &amp;lt;명령어&amp;gt;&lt;/code&gt; 형식으로 직접 알아보시기 바랍니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go fix       구버전에서 작성한 소스를 현재 버전으로 업그레이드 합니다.
go version   현재 설치된 Go언어의 버전 정보를 표시 합니다.
go env       현재 Go언어에서 사용하는 여러가지 환경변수를 표시합니다.(GOOS, GOROOT, GOPATH...)
go list      현재 시스템에 설치된 패키지를 표시 합니다. 
go run       실행파일을 생성하지 않고 곧바로 소스를 컴파일하고 실행 합니다. 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Go Web Programming: [01/04] Go Developement Tools</title>
      <link>http://xenostream.github.io/2016/02/go-web-programming-01/04-go-developement-tools</link>
      <pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://xenostream.github.io/2016/02/go-web-programming-01/04-go-developement-tools</guid>
      <description>

&lt;h1 id=&#34;go-development-tools:047ca95d26a512c102e582ec0b4e5483&#34;&gt;Go Development Tools&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Go Web Programming: [01/05] Summary</title>
      <link>http://xenostream.github.io/2016/02/go-web-programming-01/05-summary</link>
      <pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://xenostream.github.io/2016/02/go-web-programming-01/05-summary</guid>
      <description>

&lt;h1 id=&#34;01-summary:54ebe95fa4ade3ffbf480821fcf69654&#34;&gt;01_Summary&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Go Web Programming: [02/00] Basic Knowledge</title>
      <link>http://xenostream.github.io/2016/02/go-web-programming-02/00-basic-knowledge</link>
      <pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://xenostream.github.io/2016/02/go-web-programming-02/00-basic-knowledge</guid>
      <description>

&lt;h1 id=&#34;basic-knowledge:b1a10aa99bc2afeeef478938b0341311&#34;&gt;Basic Knowledge&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Go&lt;/code&gt; 언어는 C언어를 매우 닮은 시스템 프로그래밍이 가능한 &lt;code&gt;컴파일형&lt;/code&gt; 언어 입니다. 컴파일 속도가 C언어보다&lt;br /&gt;
빠르며, 언어에서 사용하는  키워드도 겨우 25개뿐 입니다. 알파벳 숫자보다 적으며, 매우 간단한 구조로 되어 있습니다.&lt;/p&gt;

&lt;p&gt;우선 어떤 키워드가 있는지 살펴 보겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;break    default     func   interface select
case     defer       go     map       struct
chan     else        goto   package   switch
const    fallthrough if     range     type
continue for         import return    var
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이번 장에서는 &lt;code&gt;Go&lt;/code&gt;언어의 기초적인 부분에 대하여 설명 합니다. 각 장을 통해서 &lt;code&gt;Go 언어&lt;/code&gt;가 얼마나 간결하고&lt;br /&gt;
정교하게 디자인되어 있는지를 아시게 될 것입니다. &lt;code&gt;Go&lt;/code&gt;를 이용해서 프로그램을 작성하는 것은 매우 즐거운 일입니다.&lt;/p&gt;

&lt;p&gt;이 장을 다 읽은 후에는 이 25개의 키워드가 더욱 친숙해 질 것입니다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>